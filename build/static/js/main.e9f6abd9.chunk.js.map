{"version":3,"sources":["components/layout/Header.js","components/Todoitem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","react_default","a","createElement","style","react_router_dom","to","Todoitem","getStyle","borderBottom","_this","props","todo","completed","_this$props$todo","this","id","title","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","border","borderRadius","cursor","float","Todos","todos","map","components_Todoitem","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","Object","defineProperty","target","name","value","display","placeholder","flex","className","About","Fragment","App","axios","delete","concat","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","layout_Header","react_router","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9f6abd9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return(\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link to=\"/\" style={linkStyle}>Home</Link> | <Link to=\"/about\" style={linkStyle}>About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todoitem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    render() { \r\n        const { id, title } = this.props.todo;\r\n\r\n        return ( \r\n            <div style={ this.getStyle() }>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {''}\r\n                    {title}\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>X</button>\r\n                </p>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nTodoitem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 8px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n \r\nexport default Todoitem;","import React, { Component } from 'react';\r\nimport Todoitem from './Todoitem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n   \r\n\r\n    render() { \r\n        return this.props.todos.map(todo => \r\n                (\r\n                    <Todoitem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n                ));\r\n    }\r\n\r\n    \r\n}\r\n\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n \r\nexport default Todos;","import React, { Component } from 'react';\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    onChange = (e) => this.setState({\r\n        [e.target.name]: e.target.value\r\n    });\r\n\r\n    render() { \r\n        return ( \r\n            <form style={{ display: 'flex' }} onSubmit={this.onSubmit}>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"title\" \r\n                    placeholder=\"Add Todo....\" \r\n                    onChange={this.onChange}\r\n                    style={{ flex: '10', padding: '5px' }} \r\n                />\r\n                <input \r\n                    type=\"submit\" \r\n                    value=\"Add\" \r\n                    style={{ flex: '1' }} \r\n                    className=\"btn\" \r\n                   \r\n                 />\r\n            </form>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AddTodo;","import React from 'react';\r\n\r\nfunction About() {\r\n    return(\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the TodoList App v1.0.0. It is part of a react crash course.</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport uuid from 'uuid';\nimport About from './components/pages/About';\nimport axios from 'axios';\n\n\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then(res => this.setState({ todos: res.data }))\n  }\n\n  markComplete = (id) => {\n    this.setState({\n        todos: this.state.todos.map(todo => {\n          if(todo.id === id) {\n            todo.completed = !todo.completed\n          }\n          return todo;\n        })\n    });\n}\n\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res => this.setState({\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\n    }))\n    ;\n  }\n\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title, \n      completed: false\n    })\n    .then(res => this.setState( {todos: [...this.state.todos, res.data] }))\n    \n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}